/*
 * graph.cpp
 *
 *  Created on: 27 cze 2019
 *      Author: Denis
 */
#include "CGraph.h"	//both

#include <cstdlib>	//srand
#include <cstdio>	//?
#include <climits>	//int_max int_min
#include "CList.h"

CGraph::CGraph(CList& list) :pprog1( &list )
{
	size=13;
	density=0.34;
	makeGraph();
	//init
/*	for(int i=0;i<sizeof(costGraph)-1;i++){
		dist[i]=INT_MAX;
		edges[i]=NULL;
	}

	//pick vertex e.g. 0
	dist[0]=0;

	while(){
		MST[j+1]=edges[i];
	}*/
}

 int CGraph::Size(){
	return size;
}

 int** CGraph::Pointer(){
	return costGraph;
}

CGraph::~CGraph(){

}

inline int CGraph::ComputeValue(){
	int Rmax=5, Rmin=1;
	return rand() % (Rmax - Rmin + 1) + Rmin;
}

inline double CGraph::ComputeProbability(){
	return (double)rand()/RAND_MAX;										//from 0 to 1
}

void CGraph::makeGraph(){
		int DiagPos=0;int j=0;
		costGraph= new int*[size];			//create 2d array of bools ON THE HEAP (dynamic)

		for(int i=0;i<size;++i){
			costGraph[i]=new int[size]; 	//new row with size x elements
			while(j<DiagPos){
					if(ComputeProbability()>density && i!=j){
						costGraph[j][i]=costGraph[i][j]=ComputeValue(); 	//!!! filling of the graph with values
					}
					else costGraph[j][i]=costGraph[i][j]=0;
					j++;
			}
		}
}

void CGraph::calcDistances(){
	for(int i=0;i<sizeof(costGraph);i++){
			for(int j=0;j<sizeof(costGraph);j++){
				if(costGraph[i][j]!=0 && costGraph[i][j]<dist[j]){
					dist[j]=costGraph[i][j];
					edges[j]=i;
			}
		}
	}
}


